
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Obter valores das variáveis de ambiente
const ENV_URL = import.meta.env.VITE_SUPABASE_URL;
const ENV_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Valores padrão válidos para demonstração quando as variáveis não estão configuradas
const FALLBACK_URL = 'https://rilcjsdbxlyfvuqyqfed.supabase.co';
const FALLBACK_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJpbGNqc2RieGx5ZnZ1cXlxZmVkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI5NDQwMzAsImV4cCI6MjA2ODUyMDAzMH0.gTt1OsvH3lc_UwBbMIKtVfN934t_FUIheSEOh3IHTFg';

// Função para obter configurações
const getSupabaseConfig = () => {
  // Usar variáveis de ambiente se disponíveis, senão usar fallbacks válidos
  const url = ENV_URL || FALLBACK_URL;
  const key = ENV_KEY || FALLBACK_KEY;
  
  return {
    url,
    key,
    isPlaceholder: !ENV_URL || !ENV_KEY
  };
};

// Obter configurações iniciais
const initialConfig = getSupabaseConfig();

// Verificar se estamos usando configuração de placeholder
export const isUsingPlaceholderConfig = initialConfig.isPlaceholder;

// Criar cliente Supabase com as configurações obtidas
export const supabase = createClient<Database>(initialConfig.url, initialConfig.key);

// Exportar URL e chave para acesso público quando necessário
export const SUPABASE_URL = initialConfig.url;
export const SUPABASE_PUBLISHABLE_KEY = initialConfig.key;

// Função para verificar se o Supabase está configurado corretamente
export const isSupabaseConfigured = () => {
  return !!(ENV_URL && ENV_KEY);
};
